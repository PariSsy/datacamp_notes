knitr::opts_chunk$set(echo = TRUE)
load(c("babynames.rds","counties.rds"))
data(c("babynames.rds","counties.rds"))
?load
load("babynames.rds")
counties <- readRDS("~/Documents/Training/DataCamp/R-Data_manipulation_with_dplyr/counties.rds")
babynames <- readRDS("~/Documents/Training/DataCamp/R-Data_manipulation_with_dplyr/babynames.rds")
data("babynames.rds")
babynames = readRDS("babynames.rds")
counties = readRDS("counties.rds")
library(dplyr)
counties %>%
count(state, wt = population, sort = TRUE)
# Find number of counties per state, weighted by citizens
counties_selected %>%
count(state, wt = citizens, sort = TRUE)
counties_selected <- counties %>%
select(region, state, population, citizens)
# Find number of counties per state, weighted by citizens
counties_selected %>%
count(state, wt = citizens, sort = TRUE)
counties_selected <- counties %>%
select(region, state, population, citizens)
# Find number of counties per state, weighted by citizens
counties_selected %>%
count(state, wt = citizens, sort = TRUE) %>%
head()
counties %>%
count(state, wt = population, sort = TRUE) %>%
head()
counties %>%
group_by(state, metro) %>%
summarize(total_pop = sum(population)) %>%
ungroup() %>%
head()
counties %>%
group_by(state, metro) %>%
summarize(total_pop = sum(population)) %>%
ungroup()
counties %>%
group_by(state, metro) %>%
summarize(total_pop = sum(population))
counties %>%
select(region, state, county, population, income) %>%
group_by(region, state) %>%
# Calculate average income
summarise(average_income = mean(income)) %>%
# Find the highest income state in each region
top_n(1,average_income)
counties %>%
select(region, state, county, population, income) %>%
group_by(region, state) %>%
# Calculate average income
summarise(average_income = mean(income)) %>%
# Find the 2 highest income states in each region
top_n(2, average_income)
counties %>%
# Select the state, county, population, and those ending with "work"
select(state, county, population, ends_with("work")) %>%
filter(public_work >= 50)
?select_helpers
# Find the year each name is most common
babynames %>%
group_by(year) %>%
mutate(year_total = sum(number)) %>%
ungroup() %>%
mutate(fraction = number / year_total) %>%
group_by(name) %>%
top_n(1,fraction)
# Find the year each name is most common
babynames %>%
group_by(year) %>%
mutate(year_total = sum(number)) %>%
ungroup() %>%
mutate(fraction = number/year_total*100) %>%
group_by(name) %>%
top_n(1,fraction) %>%
head(10)
# Find the year each name is most common
babynames %>%
group_by(year) %>%
mutate(year_total = sum(number)) %>%
ungroup() %>%
mutate(fraction = number/year_total*100) %>%
group_by(name) %>%
top_n(1,fraction) %>%
arrange(desc(fraction)) %>%
head(10)
v <- c(1, 3, 6, 14)
lag(v)
v - lag(v)
v <- c(1, 3, 6, 14)
v
lag(v)
v - lag(v)
babynames_fraction <- babynames %>%
group_by(year) %>%
mutate(year_total = sum(number)) %>%
ungroup() %>%
mutate(fraction = number / year_total)
babynames_fraction <- babynames %>%
group_by(year) %>%
mutate(year_total = sum(number)) %>%
ungroup() %>%
mutate(fraction = number / year_total)
babynames_fraction %>%
filter(name == "Matthew") %>%
arrange(year)
babynames_fraction %>%
filter(name == "Matthew") %>%
arrange(year) %>%
mutate(difference = fraction - lag(fraction))
babynames_fraction %>%
filter(name == "Matthew") %>%
arrange(year) %>%
mutate(difference = fraction - lag(fraction)) %>%
arrange(desc(difference))
babynames_fraction %>%
arrange(name, year) %>%
mutate(difference = fraction - lag(fraction)) %>%
group_by(name) %>%
arrange(desc(difference))
babynames_fraction %>%
# Arrange the data in order of name, then year
arrange(name, year) %>%
# Group the data by name
group_by(name) %>%
# Add a ratio column that contains the ratio between each year
mutate(ratio = fraction / lag(fraction))
babynames_ratios_filtered <- babynames_fraction %>%
arrange(name, year) %>%
group_by(name) %>%
mutate(ratio = fraction / lag(fraction)) %>%
filter(fraction >= 0.00001)
babynames_ratios_filtered %>%
# Extract the largest ratio from each name
top_n(1, ratio) %>%
# Sort the ratio column in descending order
arrange(desc(ratio)) %>%
# Filter for fractions greater than or equal to 0.001
filter(fraction >= 0.001)
q("yes")
