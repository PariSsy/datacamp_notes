scale_fill_manual("Transmission", values = val, labels = lab)
stripchart(mtcars$mpg)
ggplot(mtcars, aes(x = mpg, y = 0)) +
geom_jitter()+
scale_y_continuous(limits=c(-2, 2))
stripchart(mtcars$mpg)
ggplot(mtcars, aes(x = mpg, y = 0)) +
geom_jitter()+
scale_y_continuous(limits=c(-2, 2))
install.packages("imager")
# Read and print local images using load.image()
library(imager)
p1 = load.image("slides/ch4_p1.png")
p2 = load.image("slides/ch4_p2.png")
p3 = load.image("slides/ch4_p3.png")
print(p1)
p1
plot(p1)
plot(p1, labels = FALSE)
plot(p1, xaxt='n', yaxt='n')
plot(p1, axes=FALSE)
head(iris)
iris.summary <- aggregate(iris[2:5], list(iris$Species), mean)
names(iris.summary)[1] <- "Species"
iris.summary
iris.summary <- aggregate(iris[2:5], list(iris$Species), mean)
iris.summary
iris.summary <- aggregate(iris[2:5], list(iris$Species), mean)
names(iris.summary)[1] <- "Species"
iris.summary
iris.summary <- iris.summary[1:4]
iris.summary
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +
geom_point() +
geom_point(data = iris.summary, shape = 15, size = 5)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +
geom_point() +
geom_point(data = iris.summary, shape = 15, size = 5)
summary(iris)
iris.summary <- aggregate(iris[1:4], list(iris$Species), mean)
names(iris.summary)[1] <- "Species"
iris.summary
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +
geom_point() +
geom_point(data = iris.summary, shape = 15, size = 5)
plot(p2, axes=FALSE)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +
geom_point() +
geom_point(data = iris.summary,
shape = 21, size = 5, fill = "#00000080")
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +
geom_point() +
geom_vline(data = iris.summary, linetype = 2,
aes(xintercept = Sepal.Length, col = Species)) +
geom_hline(data = iris.summary, linetype = 2,
aes(yintercept = Sepal.Width, col = Species))
plot(p3, axes = FALSE)
ggplot(mtcars, aes(x = cyl, y = wt)) +
geom_jitter(width=0.1)
hist1 = ggplot(iris, aes(x = Sepal.Width )) +
geom_histogram(binwidth = 0.1) +
labs(title = "geom_histogram() stack by default")
# Create n by m ggplot grid
library(gridExtra)
?grid.arrange
hist1 = ggplot(iris, aes(x = Sepal.Width )) +
geom_histogram(binwidth = 0.1) +
labs(title = "geom_histogram() stack by default")
hist2 = ggplot(iris, aes(x = Sepal.Width, fill = Species)) +
geom_histogram(binwidth = 0.1, position = "stack") +
labs(title = "position = \"stack\"")
grid.arrange(hist1,hist2, nrow=2,ncol=2)
hist1 = ggplot(iris, aes(x = Sepal.Width )) +
geom_histogram(binwidth = 0.1) +
labs(title = "geom_histogram() stack by default")
hist2 = ggplot(iris, aes(x = Sepal.Width, fill = Species)) +
geom_histogram(binwidth = 0.1, position = "stack") +
labs(title = "position = \"stack\"")
hist3 = ggplot(iris, aes(x = Sepal.Width, fill = Species)) +
geom_histogram(binwidth = 0.1, position = "dodge") +
labs(title = "position = \"dodge\"")
hist4 = ggplot(iris, aes(x = Sepal.Width, fill = Species)) +
geom_histogram(binwidth = 0.1, position = "fill") +
labs(title = "position = \"fill\"")
grid.arrange(hist1,hist2,hist3,hist4 nrow=2,ncol=2)
hist1 = ggplot(iris, aes(x = Sepal.Width )) +
geom_histogram(binwidth = 0.1) +
labs(title = "geom_histogram() stack by default")
hist2 = ggplot(iris, aes(x = Sepal.Width, fill = Species)) +
geom_histogram(binwidth = 0.1, position = "stack") +
labs(title = "position = \"stack\"")
hist3 = ggplot(iris, aes(x = Sepal.Width, fill = Species)) +
geom_histogram(binwidth = 0.1, position = "dodge") +
labs(title = "position = \"dodge\"")
hist4 = ggplot(iris, aes(x = Sepal.Width, fill = Species)) +
geom_histogram(binwidth = 0.1, position = "fill") +
labs(title = "position = \"fill\"")
grid.arrange(hist1,hist2,hist3,hist4, nrow=2,ncol=2)
bar1 = ggplot(sleep, aes(vore)) + geom_bar() +
labs(title = "geom_bar() stat = \"bin\" by default")
bar2 =  ggplot(sleep, aes(vore)) + geom_bar( ) +
labs(title = "stat = \"bin\"")
# Distribution bar plots
library(plyr)
iris_melted <- melt(iris, value.name = "Value", variable.name = "Measure")
library(reshape2) # to use melt()
bar1 = ggplot(sleep, aes(vore)) + geom_bar() +
labs(title = "geom_bar() stat = \"bin\" by default")
bar2 =  ggplot(sleep, aes(vore)) + geom_bar( ) +
labs(title = "stat = \"bin\"")
# Distribution bar plots
library(plyr)
library(reshape2) # to use melt()
iris_melted <- melt(iris, value.name = "Value", variable.name = "Measure")
iris_summ <- ddply(iris_melted[iris_melted$Measure == "Sepal.Width",],
"Species", summarise, avg = mean(Value), stdev = sd(Value))
bar3 =  ggplot(iris_summ, aes(x = Species, y = avg)) +
geom_bar( stat = "identity") +
labs(title = "stat = \"identity\"")
bar4 =  ggplot(iris_summ, aes(x = Species, y = avg)) +
geom_bar(stat = "identity", fill = "grey50") +
geom_errorbar(aes(ymin = avg - stdev, ymax = avg + stdev), width = 0.2) +
labs(title = "geom_errorbar() aka dynamite plot")
grid.arrange(bar1,bar2,bar3,bar4, nrow=2,ncol=2)
head(sleep)
sleep
b1 = load.image("slides/ch4_bar1.png")
b3 = load.image("slides/ch4_bar2.png")
b4 = load.image("slides/ch4_bar3.png")
par(mfrow=c(2,2))
plot(b1, axes = FALSE)
plot(b1, axes = FALSE)
plot(b3, axes = FALSE)
plot(b4, axes = FALSE)
d1 = ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = "dodge")
# 2 - Define posn_d with position_dodge()
posn_d <- position_dodge(width=0.2)
d2 = ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d)
# 4 - Use posn_d as position and adjust alpha to 0.6
d3 = ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d, alpha = 0.6)
grid.arrange(d1,d2,d3, nrow=1)
mtcars$am <- as.factor(mtcars$am)
d1 = ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = "dodge")
# 2 - Define posn_d with position_dodge()
posn_d <- position_dodge(width=0.2)
d2 = ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d)
# 4 - Use posn_d as position and adjust alpha to 0.6
d3 = ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d, alpha = 0.6)
grid.arrange(d1,d2,d3, nrow=1)
pal1 = ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar() +
scale_fill_brewer(palette = "Set1")
pal2 = ggplot(Vocab, aes(x=education, fill=vocabulary)) +
geom_bar(position = "fill")+
scale_fill_brewer()
library(car) # to use Vocab
pal1 = ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar() +
scale_fill_brewer(palette = "Set1")
library(car) # to use Vocab
pal2 = ggplot(Vocab, aes(x=education, fill=vocabulary)) +
geom_bar(position = "fill")+
scale_fill_brewer()
grid.arrange(pal1,pal2, nrow=1)
str(Vocab)
pal1 = ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar() +
scale_fill_brewer(palette = "Set1")
library(car) # to use Vocab
Vocab$education = as.factor(Vocab$education)
Vocab$vocabulary = as.factor(Vocab$vocabulary)
pal2 = ggplot(Vocab, aes(x=education, fill=vocabulary)) +
geom_bar(position = "fill")+
scale_fill_brewer()
grid.arrange(pal1,pal2, nrow=1)
new_col <- colorRampPalette(c("#FFFFFF", "#0000FF"))
new_col(4) # the newly extrapolated colours
munsell::plot_hex(new_col(4)) # Quick and dirty plot
new_col <- colorRampPalette(c("#FFFFFF", "#0000FF"))
# new_col(4) # the newly extrapolated colours
munsell::plot_hex(new_col(4)) # Quick and dirty plot
# Definition of a set of blue colors
blues <- brewer.pal(9, "Blues") # from the RColorBrewer package
library(RColorBrewer)
library(RColorBrewer)
# Definition of a set of blue colors
blues <- brewer.pal(9, "Blues") # from the RColorBrewer package
# 1 - Make a color range using colorRampPalette() and the set of blues
blue_range <- colorRampPalette(blues)
# 2 - Use blue_range to adjust the color of the bars, use scale_fill_manual()
pal3 = ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_manual(values = blue_range(11))
grid.arrange(pal2, pal3)
grid.arrange(pal2, pal3, nrow=1)
# 1 - Basic histogram plot command
o1 = ggplot(mtcars, aes(mpg)) +
geom_histogram(binwidth = 1)
# 2 - Plot 1, Expand aesthetics: am onto fill
o2 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1)
# 3 - Plot 2, change position = "dodge"
o3 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1, position = "dodge")
# 4 - Plot 3, change position = "fill"
o4 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1, position = "fill")
# 5 - Plot 4, plus change position = "identity" and alpha = 0.4
o5 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1, position = "identity", alpha=0.4)
# 6 - Plot 5, plus change mapping: cyl onto fill
o6 = ggplot(mtcars, aes(mpg, fill=cyl)) +
geom_histogram(binwidth = 1, position = "identity", alpha=0.4)
grid.arrange(o1,o2,o3,o4,o5,o6, nrow=2,ncol=3)
# 1 - Basic histogram plot command
o1 = ggplot(mtcars, aes(mpg)) +
geom_histogram(binwidth = 1) + labes(1)
# 1 - Basic histogram plot command
o1 = ggplot(mtcars, aes(mpg)) +
geom_histogram(binwidth = 1) + labs(1)
# 2 - Plot 1, Expand aesthetics: am onto fill
o2 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1)
# 3 - Plot 2, change position = "dodge"
o3 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1, position = "dodge")
# 4 - Plot 3, change position = "fill"
o4 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1, position = "fill")
# 5 - Plot 4, plus change position = "identity" and alpha = 0.4
o5 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1, position = "identity", alpha=0.4)
# 6 - Plot 5, plus change mapping: cyl onto fill
o6 = ggplot(mtcars, aes(mpg, fill=cyl)) +
geom_histogram(binwidth = 1, position = "identity", alpha=0.4)
grid.arrange(o1,o2,o3,o4,o5,o6, nrow=2,ncol=3)
# 1 - Basic histogram plot command
o1 = ggplot(mtcars, aes(mpg)) +
geom_histogram(binwidth = 1) + labs(title = "Base")
# 2 - Plot 1, Expand aesthetics: am onto fill
o2 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1) + labs(title = "1")
# 3 - Plot 2, change position = "dodge"
o3 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1, position = "dodge") + labs(title = "2")
# 4 - Plot 3, change position = "fill"
o4 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1, position = "fill") + labs(title = "3")
# 5 - Plot 4, plus change position = "identity" and alpha = 0.4
o5 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1, position = "identity", alpha=0.4) + labs(title = "4")
# 6 - Plot 5, plus change mapping: cyl onto fill
o6 = ggplot(mtcars, aes(mpg, fill=cyl)) +
geom_histogram(binwidth = 1, position = "identity", alpha=0.4) + labs(title = "5")
grid.arrange(o1,o2,o3,o4,o5,o6, nrow=2,ncol=3)
mtcars$cyl = as.factor(mtcars$cyl)
# 1 - Basic histogram plot command
o1 = ggplot(mtcars, aes(mpg)) +
geom_histogram(binwidth = 1) + labs(title = "Base")
# 2 - Plot 1, Expand aesthetics: am onto fill
o2 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1) + labs(title = "1")
# 3 - Plot 2, change position = "dodge"
o3 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1, position = "dodge") + labs(title = "2")
# 4 - Plot 3, change position = "fill"
o4 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1, position = "fill") + labs(title = "3")
# 5 - Plot 4, plus change position = "identity" and alpha = 0.4
o5 = ggplot(mtcars, aes(mpg, fill=am)) +
geom_histogram(binwidth = 1, position = "identity", alpha=0.4) + labs(title = "4")
# 6 - Plot 5, plus change mapping: cyl onto fill
o6 = ggplot(mtcars, aes(mpg, fill=cyl)) +
geom_histogram(binwidth = 1, position = "identity", alpha=0.4) + labs(title = "5")
grid.arrange(o1,o2,o3,o4,o5,o6, nrow=2,ncol=3)
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = recess,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
recess = data.frame(
begin = c('1969-12-01','1973-11-01','1980-01-01','1981-07-01','1990-07-01','2001-03-01'),
end = c('1970-11-01','1975-03-01','1980-07-01','1982-11-01','1991-03-01','2001-11-01')
)
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = recess,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
recess = data.frame(
begin = c('1969-12-01','1973-11-01','1980-01-01','1981-07-01','1990-07-01','2001-03-01'),
end = c('1970-11-01','1975-03-01','1980-07-01','1982-11-01','1991-03-01','2001-11-01')
)
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = recess,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
recess
recess = data.frame(
begin = c("1969-12-01","1973-11-01","1980-01-01","1981-07-01","1990-07-01","2001-03-01"),
end = c("1970-11-01","1975-03-01","1980-07-01","1982-11-01","1991-03-01","2001-11-01")
)
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = recess,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
class(economics$date)
recess = apply(recess, 2, as.factor)
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = recess,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
recess
recess = apply(recess, 2, as.Date)
recess = data.frame(
begin = c("1969-12-01","1973-11-01","1980-01-01","1981-07-01","1990-07-01","2001-03-01"),
end = c("1970-11-01","1975-03-01","1980-07-01","1982-11-01","1991-03-01","2001-11-01")
)
recess = apply(recess, 2, as.Date)
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = recess,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
recess = data.frame(
begin = c("1969-12-01","1973-11-01","1980-01-01","1981-07-01","1990-07-01","2001-03-01"),
end = c("1970-11-01","1975-03-01","1980-07-01","1982-11-01","1991-03-01","2001-11-01")
)
recess = apply(recess, 2, as.Date)
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = recess,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
recess
class(recess)
recess = data.frame(
begin = c("1969-12-01","1973-11-01","1980-01-01","1981-07-01","1990-07-01","2001-03-01"),
end = c("1970-11-01","1975-03-01","1980-07-01","1982-11-01","1991-03-01","2001-11-01")
)
class(recess)
recess = data.frame(
begin = c("1969-12-01","1973-11-01","1980-01-01","1981-07-01","1990-07-01","2001-03-01"),
end = c("1970-11-01","1975-03-01","1980-07-01","1982-11-01","1991-03-01","2001-11-01")
)
recess$begin = as.Date(recess$begin)
recess$end = as.Date(recess$end)
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = recess,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
b1 = ggplot(beaver, aes(x = time, y = temp)) +
geom_line()
q1 =  ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + labs(title = "ggplot")
q2 =  qplot(Sepal.Length, Sepal.Width, data = iris) + labs(title = "qplot")
q3 = plot(iris$Sepal.Length, iris$Sepal.Width, main = "base R, v1")
q4 = plot(Sepal.Width ~ Sepal.Length, data = iris, main = "base R, v2")
grid.arrange(q1,q2,q3,q4, ncol=2)
library(gridBase)
install.packages("gridBase")
library(gridBase)
par(mfrow=c(2, 2))
plot(iris$Sepal.Length, iris$Sepal.Width, main = "base R, v1")
plot(Sepal.Width ~ Sepal.Length, data = iris, main = "base R, v2")
plot.new()              ## suggested by @Josh
vps <- baseViewports()
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot
library(grid)
library(gridBase)
library(grid)
par(mfrow=c(2, 2))
plot(iris$Sepal.Length, iris$Sepal.Width, main = "base R, v1")
plot(Sepal.Width ~ Sepal.Length, data = iris, main = "base R, v2")
plot.new()              ## suggested by @Josh
vps <- baseViewports()
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values
require(ggplot2)
q1 = ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + labs(title = "ggplot")
q2 =  qplot(Sepal.Length, Sepal.Width, data = iris) + labs(title = "qplot")
print(q1,q2,vp = vp1)
print(q1,vp = vp1)
print(q1,vp = vp1)
library(gridBase)
library(grid)
par(mfrow=c(2, 2))
plot(iris$Sepal.Length, iris$Sepal.Width, main = "base R, v1")
plot(Sepal.Width ~ Sepal.Length, data = iris, main = "base R, v2")
plot.new()              ## suggested by @Josh
vps <- baseViewports()
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values
require(ggplot2)
q1 = ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + labs(title = "ggplot")
q2 =  qplot(Sepal.Length, Sepal.Width, data = iris) + labs(title = "qplot")
print(q1,vp = vp1)
library(gridBase)
library(grid)
par(mfrow=c(2, 2))
plot(iris$Sepal.Length, iris$Sepal.Width, main = "base R, v1")
plot(Sepal.Width ~ Sepal.Length, data = iris, main = "base R, v2")
plot.new()              ## suggested by @Josh
vps <- baseViewports()
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values
require(ggplot2)
q1 = ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + labs(title = "ggplot")
q2 =  qplot(Sepal.Length, Sepal.Width, data = iris) + labs(title = "qplot")
print(q1,vp = vp1)
print(q2,vp=vp1)
library(gridBase)
library(grid)
par(mfrow=c(2, 2))
plot(iris$Sepal.Length, iris$Sepal.Width, main = "base R, v1")
plot(Sepal.Width ~ Sepal.Length, data = iris, main = "base R, v2")
plot.new()              ## suggested by @Josh
vps <- baseViewports()
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values
require(ggplot2)
q1 = ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + labs(title = "ggplot")
q2 =  qplot(Sepal.Length, Sepal.Width, data = iris) + labs(title = "qplot")
print(c(q1,q2),vp = vp1)
q1 =  ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + labs(title = "ggplot")
q2 =  qplot(Sepal.Length, Sepal.Width, data = iris) + labs(title = "qplot")
q3 = plot(iris$Sepal.Length, iris$Sepal.Width, main = "base R, v1")
q4 = plot(Sepal.Width ~ Sepal.Length, data = iris, main = "base R, v2")
grid.arrange(q1,q2, ncol=2)
par(mfrow=c(1,2))
q3
q4
grid.arrange(q1,q2, ncol=2)
par(mfrow=c(1,2))
plot(iris$Sepal.Length, iris$Sepal.Width, main = "base R, v1")
plot(Sepal.Width ~ Sepal.Length, data = iris, main = "base R, v2")
library(gridBase)
library(grid)
par(mfrow=c(2, 2))
plot(iris$Sepal.Length, iris$Sepal.Width, main = "base R, v1")
plot(Sepal.Width ~ Sepal.Length, data = iris, main = "base R, v2")
plot.new()              ## suggested by @Josh
vps <- baseViewports()
pushViewport(vps$figure) ##   I am in the space of the autocorrelation plot
vp1 <-plotViewport(c(1.8,1,0,1)) ## create new vp with margins, you play with this values
require(ggplot2)
q1 = ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() + labs(title = "ggplot")
q2 = qplot(Sepal.Length, Sepal.Width, data = iris) + labs(title = "qplot")
print(q1,vp = vp1)
qplot(x=factor(cyl), y=factor(vs), data = mtcars, geom = "jitter")
sapply(mtcars, class)
# "Basic" dot plot, with geom_point():
dot1 = ggplot(mtcars, aes(cyl, wt, col = am)) +
geom_point(position = position_jitter(0.2, 0))
# 1 - "True" dot plot, with geom_dotplot():
dot2 = ggplot(mtcars, aes(cyl, wt, fill = am)) +
geom_dotplot(binaxis = "y", stackdir = "center")
# 2 - qplot with geom "dotplot", binaxis = "y" and stackdir = "center"
dot3 = qplot(
cyl, wt,
data = mtcars,
fill = am,
geom = "dotplot",
binaxis = "y",
stackdir = "center"
)
grid.arrange(dot1,dot2,dot3, nrow=1)
grid.arrange(dot1,dot2,dot3, ncol=1)
grid.arrange(dot1,dot2,dot3, ncol=2)
# "Basic" dot plot, with geom_point():
dot1 = ggplot(mtcars, aes(cyl, wt, col = am)) +
geom_point(position = position_jitter(0.2, 0)) + labs(title = "geom_point()")
# 1 - "True" dot plot, with geom_dotplot():
dot2 = ggplot(mtcars, aes(cyl, wt, fill = am)) +
geom_dotplot(binaxis = "y", stackdir = "center") + labs(title = "geom_dotplot()")
# 2 - qplot with geom "dotplot", binaxis = "y" and stackdir = "center"
dot3 = qplot(
cyl, wt,
data = mtcars,
fill = am,
geom = "dotplot",
binaxis = "y",
stackdir = "center"
) + labs(title = "qplot, geom = \"dotplot\"")
grid.arrange(dot1,dot2,dot3, ncol=2)
ggplot(ChickWeight, aes(x = Time, y = weight, color = Diet)) +
geom_line(aes(group = Chick), alpha=0.3) +
geom_smooth(lwd=2, se=FALSE)
