knitr::opts_chunk$set(echo = TRUE)
oes <- load("data/oes.rds")
oes <- data("data/oes.rds")
getwd()
oes <- readRDS("data/oes.rds")
class(oes)
head(oes)
library(dplyr)
library(ggplot2)
library(knitr)
library(kableExtra)
s <- function(x){x %>% kable() %>% kable_styling(full_width = F)}
as.data.frame(head(oes))
as.data.frame(head(oes)) %>% s
dist_oes <- dist(oes, method = 'euclidean')
hc_oes <- hclust(dist_oes, method = 'average')
library(tibble)
library(tidyr)
# Move the rownames into a column of the data frame
df_oes <- rownames_to_column(as.data.frame(oes), var = 'occupation')
# Create a cluster assignment vector at h = 100,000
cut_oes <- cutree(hc_oes, h = 100000)
# Generate the segmented the oes data frame
clust_oes <- mutate(df_oes, cluster = cut_oes)
# Create a tidy data frame by gathering the year and values into two columns
gathered_oes <- gather(data = clust_oes,
key = year,
value = mean_salary,
-occupation, -cluster)
# View the clustering assignments by sorting the cluster assignment vector
sort(cut_oes)
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation))
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation)) +
labs(title = "Hierarchical Clustering", subtitle = "Based on Dendrogram with Euclidean Distance & Average Linkage") +
xlab("") +
theme(legend.position = "none") +
theme_classic()
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation)) +
labs(title = "Hierarchical Clustering", subtitle = "Based on Dendrogram with Euclidean Distance & Average Linkage") +
xlab("") +
theme(legend.position = element_blank()) +
theme_classic()
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation)) +
labs(title = "Hierarchical Clustering", subtitle = "Based on Dendrogram with Euclidean Distance & Average Linkage") +
xlab("") +
theme(legend.position = "") +
theme_classic()
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation)) +
labs(title = "Hierarchical Clustering", subtitle = "Based on Dendrogram with Euclidean Distance & Average Linkage") +
xlab("") +
theme(legend.position = "none") +
theme_classic()
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation)) +
labs(title = "Hierarchical Clustering", subtitle = "Based on Dendrogram with Euclidean Distance & Average Linkage") +
xlab("") +
theme(legend.position = "none")
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation)) +
labs(title = "Hierarchical Clustering", subtitle = "Based on Dendrogram with Euclidean Distance & Average Linkage") +
xlab("") +
theme_classic(legend.position = "none")
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation)) +
labs(title = "Hierarchical Clustering", subtitle = "Based on Dendrogram with Euclidean Distance & Average Linkage") +
xlab("") +
theme_classic(legend.position = "none")
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation)) +
labs(title = "Hierarchical Clustering", subtitle = "Based on Dendrogram with Euclidean Distance & Average Linkage") +
xlab("") +
theme_classic() +
theme(legend.position = "none")
# Plot the relationship between mean_salary and year and color the lines by the assigned cluster
ggplot(gathered_oes, aes(x = year, y = mean_salary, color = factor(cluster))) +
geom_line(aes(group = occupation)) +
labs(title = "Hierarchical Clustering", subtitle = "Based on Dendrogram with Euclidean Distance & Average Linkage") +
xlab("") +
ylab("") +
theme_classic() +
theme(
legend.position = "none",
axis.text.x = element_text(angle = 90)
)
# Use map_dbl to run many models with varying value of k (centers)
tot_withinss <- map_dbl(1:10,  function(k){
model <- kmeans(x = oes, centers = k)
model$tot.withinss
})
library(purrr)
# Use map_dbl to run many models with varying value of k (centers)
tot_withinss <- map_dbl(1:10,  function(k){
model <- kmeans(x = oes, centers = k)
model$tot.withinss
})
# Generate a data frame containing both k and tot_withinss
elbow_df <- data.frame(
k = 1:10,
tot_withinss = tot_withinss
)
# Plot the elbow plot
ggplot(elbow_df, aes(x = k, y = tot_withinss)) +
geom_line() +
scale_x_continuous(breaks = 1:10)
# Plot the elbow plot
ggplot(elbow_df, aes(x = k, y = tot_withinss)) +
geom_line() +
scale_x_continuous(breaks = 1:10) +
theme_classic()
# Plot the elbow plot
ggplot(elbow_df, aes(x = k, y = tot_withinss)) +
geom_line() +
scale_x_continuous(breaks = 1:10) +
theme_classic() +
labs(title = "Elbow Analysis for K-means")
library(purrr)
# Use map_dbl to run many models with varying value of k (centers)
tot_withinss <- map_dbl(1:10,  function(k){
model <- kmeans(x = oes, centers = k)
model$tot.withinss
})
# Generate a data frame containing both k and tot_withinss
elbow_df <- data.frame(
k = 1:10,
tot_withinss = tot_withinss
)
# Plot the elbow plot
ggplot(elbow_df, aes(x = k, y = tot_withinss)) +
geom_line() +
scale_x_continuous(breaks = 1:10) +
theme_classic() +
labs(title = "Elbow Analysis for K-means")
# Use map_dbl to run many models with varying value of k
sil_width <- map_dbl(2:10,  function(k){
model <- pam(oes, k = k)
model$silinfo$avg.width
})
library(purrr)
library(cluster)
# Use map_dbl to run many models with varying value of k (centers)
tot_withinss <- map_dbl(1:10,  function(k){
model <- kmeans(x = oes, centers = k)
model$tot.withinss
})
# Generate a data frame containing both k and tot_withinss
elbow_df <- data.frame(
k = 1:10,
tot_withinss = tot_withinss
)
# Plot the elbow plot
ggplot(elbow_df, aes(x = k, y = tot_withinss)) +
geom_line() +
scale_x_continuous(breaks = 1:10) +
theme_classic() +
labs(title = "Elbow Analysis for K-means")
# Use map_dbl to run many models with varying value of k
sil_width <- map_dbl(2:10,  function(k){
model <- pam(oes, k = k)
model$silinfo$avg.width
})
# Generate a data frame containing both k and sil_width
sil_df <- data.frame(
k = 2:10,
sil_width = sil_width
)
# Plot the relationship between k and sil_width
ggplot(sil_df, aes(x = k, y = sil_width)) +
geom_line() +
scale_x_continuous(breaks = 2:10) +
labs(title = "Average Silhouette Widths for K-means") +
theme_classic()
rm(p1)
# Prepare the Distance Matrix
dist_oes <- dist(oes)
# Generate hclust for complete, single & average linkage methods
hc_complete <- hclust(dist_oes, method = "complete")
hc_single <- hclust(dist_oes, method = "single")
hc_average <- hclust(dist_oes, method = "average")
# Plot & Label the 3 Dendrograms Side-by-Side
# Hint: To see these Side-by-Side run the 4 lines together as one command
par(mfrow = c(1,3))
plot(hc_complete, main = 'Complete Linkage')
plot(hc_single, main = 'Single Linkage')
plot(hc_average, main = 'Average Linkage')
# Prepare the Distance Matrix
dist_oes <- dist(oes)
# Generate hclust for complete, single & average linkage methods
hc_complete <- hclust(dist_oes, method = "complete")
hc_single <- hclust(dist_oes, method = "single")
hc_average <- hclust(dist_oes, method = "average")
# Plot & Label the 3 Dendrograms Side-by-Side
# Hint: To see these Side-by-Side run the 4 lines together as one command
par(mfrow = c(1,3))
plot(hc_complete, main = 'Complete Linkage', xlab = "")
plot(hc_single, main = 'Single Linkage', xlab = "")
plot(hc_average, main = 'Average Linkage', xlab = "")
plot(hc_complete, main = 'Complete Linkage', xlab = NULL)
plot(hc_complete, main = 'Complete Linkage', xlab = NA)
# Prepare the Distance Matrix
dist_oes <- dist(oes)
# Generate hclust for complete, single & average linkage methods
hc_complete <- hclust(dist_oes, method = "complete")
hc_single <- hclust(dist_oes, method = "single")
hc_average <- hclust(dist_oes, method = "average")
# Plot & Label the 3 Dendrograms Side-by-Side
# Hint: To see these Side-by-Side run the 4 lines together as one command
par(mfrow = c(3,1))
plot(hc_complete, main = 'Complete Linkage', xlab = "")
plot(hc_single, main = 'Single Linkage', xlab = "")
plot(hc_average, main = 'Average Linkage', xlab = "")
# Prepare the Distance Matrix
dist_oes <- dist(oes)
# Generate hclust for complete, single & average linkage methods
hc_complete <- hclust(dist_oes, method = "complete")
hc_single <- hclust(dist_oes, method = "single")
hc_average <- hclust(dist_oes, method = "average")
# Plot & Label the 3 Dendrograms Side-by-Side
# Hint: To see these Side-by-Side run the 4 lines together as one command
par(mfrow = c(2,2))
plot(hc_complete, main = 'Complete Linkage', xlab = "")
plot(hc_single, main = 'Single Linkage', xlab = "")
plot(hc_average, main = 'Average Linkage', xlab = "")
# Prepare the Distance Matrix
dist_oes <- dist(oes)
# Generate hclust for complete, single & average linkage methods
hc_complete <- hclust(dist_oes, method = "complete")
hc_single <- hclust(dist_oes, method = "single")
hc_average <- hclust(dist_oes, method = "average")
# Plot & Label the 3 Dendrograms Side-by-Side
# Hint: To see these Side-by-Side run the 4 lines together as one command
plot(hc_complete, main = 'Complete Linkage', xlab = "")
plot(hc_single, main = 'Single Linkage', xlab = "")
plot(hc_average, main = 'Average Linkage', xlab = "")
library(dendextend)
install.packages("dendextend")
library(dendextend)
hc_oes <- hclust(dist_oes, method = "complete")
# Create a dendrogram object from the hclust variable
dend_oes <- as.dendrogram(hc_oes)
# Plot the dendrogram
plot(dend_oes)
# Color branches by cluster formed from the cut at a height of 100000 & plot
dend_100000 <- color_branches(dend_oes, h = 100000)
# Plot the dendrogram with clusters colored below height 100000
plot(dend_100000)
library(dendextend)
hc_oes <- hclust(dist_oes, method = "complete")
# Create a dendrogram object from the hclust variable
dend_oes <- as.dendrogram(hc_oes)
# Plot the dendrogram
plot(dend_oes)
# Color branches by cluster formed from the cut at a height of 100000 & plot
dend_100000 <- color_branches(dend_oes, h = 100000)
# Plot the dendrogram with clusters colored below height 100000
plot(dend_100000)
library(dendextend)
hc_oes <- hclust(dist_oes, method = "complete")
# Create a dendrogram object from the hclust variable
dend_oes <- as.dendrogram(hc_oes)
# Color branches by cluster formed from the cut at a height of 100000 & plot
dend_100000 <- color_branches(dend_oes, h = 100000)
# Plot the dendrogram with clusters colored below height 100000
par(mfrow = c(1,2))
plot(dend_oes)
plot(dend_100000)
cut_oes
cut_oes %>% s
q("yes")
